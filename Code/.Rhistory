library(transport)
library(EasyMMD)
n_sample=500
entropy_distance_over<-numeric(10)
wass_distance_over<-numeric(10)
mmd_distance_over<-numeric(10)
entropy_distance_nonover<-numeric(10)
wass_distance_nonover<-numeric(10)
mmd_distance_nonover<-numeric(10)
diff_mean=seq(1,4,length=10)
overlapp=0
for (i in 1:10){
x1=rnorm(n_sample)
x0=rnorm(n_sample,diff_mean)
#Overlapping Case
if(overlapp==1){
t_x1=x1[x1>0&x1<diff_mean]
t_x0=x0[x0>0&x0<diff_mean]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
entropy_distance_over[i]=entropy=sum(w_0*log(w_0))+sum(w_1*log(w_1))
wass_distance_over[i]=wasserstein1d(t_x1,t_x0)
mmd_distance_over[i]=MMD(t_x1,t_x0)
}
else{
t_x1=x1[x1>-diff_mean&x1<3*diff_mean]
t_x0=x0[x0>-diff_mean&x0<3*diff_mean]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
entropy_distance_nonover[i]=entropy=sum(w_0*log(w_0))+sum(w_1*log(w_1))
wass_distance_nonover[i]=wasserstein1d(t_x1,t_x0)
mmd_distance_nonover[i]=MMD(t_x1,t_x0)
}
}
plot(-entropy_distance_over,type='l')
library(transport)
library(EasyMMD)
n_sample=500
entropy_distance_over<-numeric(10)
wass_distance_over<-numeric(10)
mmd_distance_over<-numeric(10)
entropy_distance_nonover<-numeric(10)
wass_distance_nonover<-numeric(10)
mmd_distance_nonover<-numeric(10)
diff_mean=seq(1,4,length=10)
overlapp=0
for (i in 1:10){
x1=rnorm(n_sample)
x0=rnorm(n_sample,diff_mean[i])
t_x1=x1[x1>0&x1<diff_mean[i]]
t_x0=x0[x0>0&x0<diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
entropy_distance_over[i]=entropy=sum(w_0*log(w_0))+sum(w_1*log(w_1))
wass_distance_over[i]=wasserstein1d(t_x1,t_x0)
mmd_distance_over[i]=MMD(t_x1,t_x0)
t_x1=x1[x1>-diff_mean[i]&x1<3*diff_mean[i]]
t_x0=x0[x0>-diff_mean[i]&x0<3*diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
entropy_distance_nonover[i]=entropy=sum(w_0*log(w_0))+sum(w_1*log(w_1))
wass_distance_nonover[i]=wasserstein1d(t_x1,t_x0)
mmd_distance_nonover[i]=MMD(t_x1,t_x0)
}
library(transport)
library(EasyMMD)
n_sample=500
entropy_distance_over<-numeric(10)
wass_distance_over<-numeric(10)
mmd_distance_over<-numeric(10)
entropy_distance_nonover<-numeric(10)
wass_distance_nonover<-numeric(10)
mmd_distance_nonover<-numeric(10)
diff_mean=seq(1,3,length=10)
overlapp=0
for (i in 1:10){
x1=rnorm(n_sample)
x0=rnorm(n_sample,diff_mean[i])
t_x1=x1[x1>0&x1<diff_mean[i]]
t_x0=x0[x0>0&x0<diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
entropy_distance_over[i]=entropy=sum(w_0*log(w_0))+sum(w_1*log(w_1))
wass_distance_over[i]=wasserstein1d(t_x1,t_x0)
mmd_distance_over[i]=MMD(t_x1,t_x0)
t_x1=x1[x1>-diff_mean[i]&x1<3*diff_mean[i]]
t_x0=x0[x0>-diff_mean[i]&x0<3*diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
entropy_distance_nonover[i]=entropy=sum(w_0*log(w_0))+sum(w_1*log(w_1))
wass_distance_nonover[i]=wasserstein1d(t_x1,t_x0)
mmd_distance_nonover[i]=MMD(t_x1,t_x0)
}
library(transport)
library(EasyMMD)
n_sample=500
entropy_distance_over<-numeric(10)
wass_distance_over<-numeric(10)
mmd_distance_over<-numeric(10)
entropy_distance_nonover<-numeric(10)
wass_distance_nonover<-numeric(10)
mmd_distance_nonover<-numeric(10)
diff_mean=seq(1,2,length=10)
overlapp=0
for (i in 1:10){
x1=rnorm(n_sample)
x0=rnorm(n_sample,diff_mean[i])
t_x1=x1[x1>0&x1<diff_mean[i]]
t_x0=x0[x0>0&x0<diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
entropy_distance_over[i]=entropy=sum(w_0*log(w_0))+sum(w_1*log(w_1))
wass_distance_over[i]=wasserstein1d(t_x1,t_x0)
mmd_distance_over[i]=MMD(t_x1,t_x0)
t_x1=x1[x1>-diff_mean[i]&x1<3*diff_mean[i]]
t_x0=x0[x0>-diff_mean[i]&x0<3*diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
entropy_distance_nonover[i]=entropy=sum(w_0*log(w_0))+sum(w_1*log(w_1))
wass_distance_nonover[i]=wasserstein1d(t_x1,t_x0)
mmd_distance_nonover[i]=MMD(t_x1,t_x0)
}
plot(-entropy_distance_over,type='l')
lines(-entropy_distance_nonover,type='l')
lines(-entropy_distance_nonover,type='l')
entropy_distance_nonover
entropy_distance_over
plot(-entropy_distance_over,type='l',col="red")
lines(-entropy_distance_nonover,type='l',col="blue")
plot(mmd_distance_over,type='l',col="red")
lines(mmd_distance_nonover,type='l',col="blue")
plot(-entropy_distance_over,type='l',col="red")
lines(-entropy_distance_nonover,type='l',col="blue")
plot(wass_distance_over,type='l',col="red")
lines(wass_distance_nonover,type='l',col="blue")
wass_distance_over
(wass_distance_nonover
)
library(transport)
library(EasyMMD)
n_sample=500
entropy_distance_over<-numeric(10)
wass_distance_over<-numeric(10)
mmd_distance_over<-numeric(10)
entropy_distance_nonover<-numeric(10)
wass_distance_nonover<-numeric(10)
mmd_distance_nonover<-numeric(10)
diff_mean=seq(1,2,length=10)
overlapp=0
for (i in 1:10){
x1=rnorm(n_sample)
x0=rnorm(n_sample,diff_mean[i])
t_x1=x1[x1>0&x1<diff_mean[i]]
t_x0=x0[x0>0&x0<diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
entropy_distance_over[i]=entropy=sum(w_0*log(w_0))+sum(w_1*log(w_1))
wass_distance_over[i]=wasserstein1d(t_x1,t_x0)
mmd_distance_over[i]=MMD(t_x1,t_x0)
x1=rnorm(n_sample)
x0=rnorm(n_sample,0.5*diff_mean[i])
t_x1=x1[x1>-diff_mean[i]&x1<3*diff_mean[i]]
t_x0=x0[x0>-diff_mean[i]&x0<3*diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
entropy_distance_nonover[i]=entropy=sum(w_0*log(w_0))+sum(w_1*log(w_1))
wass_distance_nonover[i]=wasserstein1d(t_x1,t_x0)
mmd_distance_nonover[i]=MMD(t_x1,t_x0)
}
# plot(density(x1))
# lines(density(x0))
plot(-entropy_distance_over,type='l',col="red")
lines(-entropy_distance_nonover,type='l',col="blue")
plot(mmd_distance_over,type='l',col="red")
lines(mmd_distance_nonover,type='l',col="blue")
plot(wass_distance_over,type='l',col="red")
lines(wass_distance_nonover,type='l',col="blue")
entropy_distance_over
entropy_distance_nonover
diff_mean=seq(1,2,length=10)
overlapp=0
for (i in 1:10){
x1=rnorm(n_sample)
x0=rnorm(n_sample,diff_mean[i])
t_x1=x1[x1>0&x1<diff_mean[i]]
t_x0=x0[x0>0&x0<diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
entropy_distance_over[i]=entropy=sum(w_0*log(w_0))+sum(w_1*log(w_1))
wass_distance_over[i]=wasserstein1d(t_x1,t_x0)
mmd_distance_over[i]=MMD(t_x1,t_x0)
x1=rnorm(n_sample)
x0=rnorm(n_sample,0.2*diff_mean[i])
t_x1=x1[x1>-diff_mean[i]&x1<3*diff_mean[i]]
t_x0=x0[x0>-diff_mean[i]&x0<3*diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
entropy_distance_nonover[i]=entropy=sum(w_0*log(w_0))+sum(w_1*log(w_1))
wass_distance_nonover[i]=wasserstein1d(t_x1,t_x0)
mmd_distance_nonover[i]=MMD(t_x1,t_x0)
}
# plot(density(x1))
# lines(density(x0))
plot(-entropy_distance_over,type='l',col="red")
lines(-entropy_distance_nonover,type='l',col="blue")
plot(mmd_distance_over,type='l',col="red")
lines(mmd_distance_nonover,type='l',col="blue")
plot(wass_distance_over,type='l',col="red")
lines(wass_distance_nonover,type='l',col="blue")
library(transport)
library(EasyMMD)
n_sample=500
entropy_distance_over<-numeric(10)
wass_distance_over<-numeric(10)
mmd_distance_over<-numeric(10)
entropy_distance_nonover<-numeric(10)
wass_distance_nonover<-numeric(10)
mmd_distance_nonover<-numeric(10)
diff_mean=seq(1,2,length=10)
overlapp=0
for (i in 1:10){
x1=rnorm(n_sample)
x0=rnorm(n_sample,diff_mean[i])
t_x1=x1[x1>0&x1<diff_mean[i]]
t_x0=x0[x0>0&x0<diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
entropy_distance_over[i]=entropy=sum(w_0*log(w_0))+sum(w_1*log(w_1))
wass_distance_over[i]=wasserstein1d(t_x1,t_x0)
mmd_distance_over[i]=MMD(t_x1,t_x0)
x1=rnorm(n_sample)
x0=rnorm(n_sample,0.2*diff_mean[i])
t_x1=x1[x1>-diff_mean[i]&x1<3*diff_mean[i]]
t_x0=x0[x0>-diff_mean[i]&x0<3*diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
entropy_distance_nonover[i]=entropy=sum(w_0*log(w_0))+sum(w_1*log(w_1))
wass_distance_nonover[i]=wasserstein1d(t_x1,t_x0)
mmd_distance_nonover[i]=MMD(t_x1,t_x0)
}
# plot(density(x1))
# lines(density(x0))
plot(-entropy_distance_nonover,type='l',col="red")
lines(-entropy_distance_over,type='l',col="blue")
plot(mmd_distance_over,type='l',col="red")
lines(mmd_distance_nonover,type='l',col="blue")
plot(wass_distance_over,type='l',col="red")
lines(wass_distance_nonover,type='l',col="blue")
plot(-entropy_distance_nonover,type='l',ylim=c(0,15),col="blue")
lines(-entropy_distance_over,type='l',col="blue")
plot(-entropy_distance_nonover,type='l',ylim=c(9,13),col="blue")
lines(-entropy_distance_over,type='l',col="red")
plot(mmd_distance_over,type='l',col="red")
lines(mmd_distance_nonover,type='l',col="blue")
plot(wass_distance_over,type='l',col="red")
lines(wass_distance_nonover,type='l',col="blue")
library(transport)
library(EasyMMD)
n_sample=500
entropy_distance_over<-numeric(10)
wass_distance_over<-numeric(10)
mmd_distance_over<-numeric(10)
entropy_distance_nonover<-numeric(10)
wass_distance_nonover<-numeric(10)
mmd_distance_nonover<-numeric(10)
diff_mean=seq(1,2,length=10)
overlapp=0
for (i in 1:10){
temp_1=numeric(100)
temp_2=numeric(100)
temp_3=numeric(100)
for(trial in 1:100){
x1=rnorm(n_sample)
x0=rnorm(n_sample,diff_mean[i])
t_x1=x1[x1>0&x1<diff_mean[i]]
t_x0=x0[x0>0&x0<diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
temp_1=sum(w_0*log(w_0))+sum(w_1*log(w_1))
temp_2=wasserstein1d(t_x1,t_x0)
temp_3=MMD(t_x1,t_x0)
}
entropy_distance_over[i]=mean(temp_1)
wass_distance_over[i]=mean(temp_2)
mmd_distance_over[i]=mean(temp_3)
temp_1=numeric(100)
temp_2=numeric(100)
temp_3=numeric(100)
for(trial in 1:100){
x1=rnorm(n_sample)
x0=rnorm(n_sample,0.2*diff_mean[i])
t_x1=x1[x1>-diff_mean[i]&x1<3*diff_mean[i]]
t_x0=x0[x0>-diff_mean[i]&x0<3*diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
temp_1=sum(w_0*log(w_0))+sum(w_1*log(w_1))
temp_2=wasserstein1d(t_x1,t_x0)
temp_3=MMD(t_x1,t_x0)
}
entropy_distance_nonover[i]=mean(temp_1)
wass_distance_nonover[i]=mean(temp_2)
mmd_distance_nonover[i]=mean(temp_3)
}
plot(-entropy_distance_nonover,type='l',ylim=c(9,13),col="blue")
lines(-entropy_distance_over,type='l',col="red")
plot(mmd_distance_over,type='l',col="red")
lines(mmd_distance_nonover,type='l',col="blue")
plot(wass_distance_over,type='l',col="red")
lines(wass_distance_nonover,type='l',col="blue")
plot(mmd_distance_over,type='l',col="red")
lines(mmd_distance_nonover,type='l',col="blue")
seq(1,2,length=10)
library(EasyMMD)
n_sample=500
entropy_distance_over<-numeric(10)
wass_distance_over<-numeric(10)
mmd_distance_over<-numeric(10)
entropy_distance_nonover<-numeric(10)
wass_distance_nonover<-numeric(10)
mmd_distance_nonover<-numeric(10)
diff_mean=seq(1,3,length=10)
overlapp=0
for (i in 1:10){
temp_1=numeric(100)
temp_2=numeric(100)
temp_3=numeric(100)
for(trial in 1:100){
x1=rnorm(n_sample)
x0=rnorm(n_sample,diff_mean[i])
t_x1=x1[x1>0&x1<diff_mean[i]]
t_x0=x0[x0>0&x0<diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
temp_1=sum(w_0*log(w_0))+sum(w_1*log(w_1))
temp_2=wasserstein1d(t_x1,t_x0)
temp_3=MMD(t_x1,t_x0)
}
entropy_distance_over[i]=mean(temp_1)
wass_distance_over[i]=mean(temp_2)
mmd_distance_over[i]=mean(temp_3)
temp_1=numeric(100)
temp_2=numeric(100)
temp_3=numeric(100)
for(trial in 1:100){
x1=rnorm(n_sample)
x0=rnorm(n_sample,0.2*diff_mean[i])
t_x1=x1[x1>-diff_mean[i]&x1<3*diff_mean[i]]
t_x0=x0[x0>-diff_mean[i]&x0<3*diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
temp_1=sum(w_0*log(w_0))+sum(w_1*log(w_1))
temp_2=wasserstein1d(t_x1,t_x0)
temp_3=MMD(t_x1,t_x0)
}
entropy_distance_nonover[i]=mean(temp_1)
wass_distance_nonover[i]=mean(temp_2)
mmd_distance_nonover[i]=mean(temp_3)
}
# plot(density(x1))
# lines(density(x0))
plot(-entropy_distance_nonover,type='l',ylim=c(9,13),col="blue")
lines(-entropy_distance_over,type='l',col="red")
plot(mmd_distance_over,type='l',col="red")
lines(mmd_distance_nonover,type='l',col="blue")
plot(wass_distance_over,type='l',col="red")
lines(wass_distance_nonover,type='l',col="blue")
setwd("C:/Users/Shuxi ZENG/Dropbox/Third Year/OCP_Revise/Code_Readme/OCP_LIV_JRSSA")
setwd("C:/Users/Shuxi ZENG/Dropbox/Third Year/OCP_Revise/Code_Readme/OCP_LIV_JRSSA/Code")
#This Script preprocess the data for subsequent analysis
#adult2010<-read.dta13("CFPS_2010_Adult_Clean_0714.dta")
load("../Data/CFPS_2010_Data.RData")
#read the data of instrument variable
ifppr<-read.table("../Data/IFPPR.txt",header=TRUE)
#Unify the name of province variable
ifppr$provcd_born=ifppr$provcd
#combine the data set
merge<-merge(adult2010,ifppr,by=c("provcd_born"))
setwd("C:/Users/Shuxi ZENG/Dropbox/Third Year/OCP_Revise/Code_Readme/OCP_LIV_JRSSA/Code")
#This Script preprocess the data for subsequent analysis
#adult2010<-read.dta13("CFPS_2010_Adult_Clean_0714.dta")
load("../Data/CFPS_2010_Data.RData")
#read the data of instrument variable
ifppr<-read.table("../Data/IFPPR.txt",header=TRUE)
#Unify the name of province variable
ifppr$provcd_born=ifppr$provcd
#combine the data set
merge<-merge(adult2010,ifppr,by=c("provcd_born"))
write.csv(merge,file="../Data/CFPS_new.csv")
full_data<-read.csv(file="../Data/CFPS_2010.csv",header=T)
# #This Script preprocess the data for subsequent analysis
# #adult2010<-read.dta13("CFPS_2010_Adult_Clean_0714.dta")
# load("../Data/CFPS_2010_Data.RData")
# #read the data of instrument variable
# ifppr<-read.table("../Data/IFPPR.txt",header=TRUE)
# #Unify the name of province variable
# ifppr$provcd_born=ifppr$provcd
# #Monotonic transformation
# ifppr$ifppr = 140-ifppr
# #combine the data set
# merge<-merge(adult2010,ifppr,by=c("provcd_born"))
#Extract Range
start=1979;end=2010;iend=140
## Read data
full_data<-read.csv(file="../Data/CFPS_2010.csv",header=T)
#Extract the data within the range specified
data1<-subset(full_data,age>=(2010-end)&age<=(2010-start)&ifppr<iend)
data1$mage_birth=data1$mage-data1$age
data1$fage_birth=data1$fage-data1$age
#Divide Data into 4 Subgroups by Hukou Status and Gender
data_00=subset(data1,urban_3==0&gender==0)
data_10=subset(data1,urban_3==1&gender==0)
data_01=subset(data1,urban_3==0&gender==1)
data_11=subset(data1,urban_3==1&gender==1)
#Codebook for Variable Name
#Notice that sampling weight (national combined weight) is included
#covariate_index<-c("meduy","feduy","age","han","rswt_nat")
covariate_index<-c("meduy","feduy","age","han","fincome","fage_birth","qb1","younger_brother",
"mage_birth","divorce","remarriage")
response_index<-c("confidence","anxiety","desperation")
treatment_index<-"onechild"
instrument_index<-"ifppr"
cluster_index<-"provcd_born"
#Create a List to Combine Differ Data Set
data.combine<-list(data_00,data_01,data_10,data_11)
data.jags=data.combine
#Summary statistics
# dim(data_00)
# dim(data_01)
# dim(data_10)
# dim(data_11)
# sum(data_00$onechild)
# sum(data_01$onechild)
# sum(data_10$onechild)
# sum(data_11$onechild)
# apply(data1[,covariate_index],2,FUN=function(x){mean(x,na.rm = T
#                                                      )})
# apply(data1[,covariate_index],2,FUN=function(x){sd(x,na.rm = T)})
# apply(subset(data1,onechild==1)[,covariate_index],2,FUN=function(x){mean(x,na.rm = T
# )})
# apply(subset(data1,onechild==1)[,covariate_index],2,FUN=function(x){sd(x,na.rm = T
# )})
# apply(subset(data1,onechild==0)[,covariate_index],2,FUN=function(x){mean(x,na.rm = T
# )})
# apply(subset(data1,onechild==0)[,covariate_index],2,FUN=function(x){sd(x,na.rm = T
# )})
# outcome_table=NULL
# outcome_table=rbind(apply(data1[,response_index],2,FUN=function(x){mean(x,na.rm = T
# )}),
# apply(data1[,response_index],2,FUN=function(x){sd(x,na.rm = T)}),
# apply(subset(data1,onechild==1)[,response_index],2,FUN=function(x){mean(x,na.rm = T
# )}),
# apply(subset(data1,onechild==1)[,response_index],2,FUN=function(x){sd(x,na.rm = T
# )}),
# apply(subset(data1,onechild==0)[,response_index],2,FUN=function(x){mean(x,na.rm = T
# )}),
# apply(subset(data1,onechild==0)[,response_index],2,FUN=function(x){sd(x,na.rm = T
# )}))
load("C:/Users/Shuxi ZENG/Dropbox/Third Year/OCP_Revise/Code_Readme/OCP_LIV_JRSSA/Code/Figure.RData")
